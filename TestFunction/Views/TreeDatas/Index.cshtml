@model IEnumerable<TestFunction.Models.TreeData>

@{
    ViewData["Title"] = "Index";
}
<style>
    #tableWrapper {
        width: 100%;
        height: 600px;
        overflow: hidden;
        position: relative;
    }
</style>
<h1>Index</h1>
<link href="~/jquery.fancytree/dist/skin-win8/ui.fancytree.min.css" rel="stylesheet" />
<p>
    <a asp-action="Create">Create New asdasasd</a>
</p>
<button id="submitData" class="btn btn-outline-primary">Submit data</button>
<p>Load from Ajax data:</p>
<div id="tableWrapper">
    <table id="treetable">
        <thead>
            <tr>
                <th class="parent-path">Id</th>
                <th class="parent-path">Title</th>
                <th class="parent-path">Author</th>
                <th>Year</th>
                <th>Quantity</th>
                <th>Price</th>
            </tr>
        </thead>
        <tbody>
            <!-- Define a row template for all invariant markup: -->
            <tr>
                <td class="alignCenter"></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
            </tr>
        </tbody>
    </table>
</div>


@section Scripts {
    @{
        await Html.RenderPartialAsync("_FancyTreeScriptPartial");
    }

    <script>
        $(function () {
            $("#treetable").fancytree({
                extensions: ["table", "fixed", "edit", "gridnav"],
                icon: false,
                titlesTabbable: true, // Add all node titles to TAB chain
                // fixed cols and rows
                fixed: {
                    fixCols: 2,    // Fix leftmost n columns
                    //            fixColWidths: [16, 50, 200],
                    fixRows: true  // Fix topmost n rows (true: whole <thead>)
                },
                gridnav: {
                    autofocusInput: false,
                    handleCursorKeys: true,
                },
                table: {
                    indentation: 20,       // indent 20px per node level
                    nodeColumnIdx: 1,      // render the node title into the 2nd column
                },
                source: {
                    url: "api/TreeDatas"
                },
                tooltip: function (event, data) {
                    return data.node.data.name;
                },
                lazyLoad: function (event, data) {
                    var node = data.node;
                    console.log(node);
                    // Issue an Ajax request to load child nodes
                    data.result = {
                        url: "api/TreeDatas/" + node.key
                    }
                },
                // column for table
                renderColumns: function (event, data) {
                    var node = data.node,
                        $tdList = $(node.tr).find(">td");
                    var row = $(node.tr);
                    // (index #0 is rendered by fancytree by adding the checkbox)
                     $tdList.eq(0).text(node.getIndexHier());  //.addClass("alignRight");
                    // (index #2 is rendered by fancytree)
                    $tdList.eq(2).html(`<input type="hidden" name="id" value="${node.getIndexHier()}"<span>${node.data.author}</span>`);  //.addClass("alignRight");
                    // $tdList.eq(2).text(node.data.author);
                    $tdList.eq(3).text(node.data.year);
                    if (!node.isFolder()) {
                        $tdList.eq(4).html(`<input name="quantity" type="number" value="${node.data.quantity}" />`);
                        $tdList.eq(5).html(`<input name="price" type="number" step="0.001" value="${node.data.price}" />`);
                        row.on("blur", "input", function (e) {
                            switch ($(this).attr("name")) {
                                case "quantity": {
                                    if (node.data.quantity == $(this).val()) {
                                        $(this).removeClass("border border-success border-warning modified");
                                        break;
                                    }
                                    if (node.data.quantity) {
                                        $(this).addClass("border border-warning modified");
                                    } else {
                                        $(this).addClass("border border-success modified");
                                    }
                                    //node.data.quantity = $(this).val();
                                    break;
                                }
                                case "price": {
                                    if (node.data.price == $(this).val()) {
                                        $(this).removeClass("border border-success border-warning modified");
                                        break;
                                    }
                                    if (node.data.price) {
                                        $(this).addClass("border border-warning modified");
                                    } else {
                                        $(this).addClass("border border-success modified");
                                    }
                                    //node.data.price = $(this).val(); 
                                    break;
                                }
                                default:
                            }
                        });
                    }
                },
                // collapse for fixed extension
                collapse: function (event, data) {
                    data.node.discardMarkup(false);
                },
                postProcess: function (event, data) {
                    data.result = convertDataSetKey(data.response);   // convert from flat data
                },
                // edit extension
                edit: {
                    adjustWidthOfs: 10,     // When switching to edit mode, the title is replace with an input control. The input width is calculated from the current title text width plus this increment.
                    triggerStart: ["f2", "dblclick", "clickActive"],     // press F2, double click or click again into an already active node title to edit

                }
            })
                .on("keydown", function (e) {
                    var cmd = null;
                    switch ($.ui.fancytree.eventToString(e)) {
                        case "ctrl+shift+n":
                        case "meta+shift+n": // mac: cmd+shift+n
                            cmd = "addChild";
                            break;
                        case "ctrl+c":
                        case "meta+c": // mac
                            cmd = "copy";
                            break;
                        case "ctrl+v":
                        case "meta+v": // mac
                            cmd = "paste";
                            break;
                        case "ctrl+x":
                        case "meta+x": // mac
                            cmd = "cut";
                            break;
                        case "ctrl+n":
                        case "meta+n": // mac
                            cmd = "addSibling";
                            break;
                        case "del":
                        case "meta+backspace": // mac
                            cmd = "remove";
                            break;
                        // case "f2":  // already triggered by ext-edit pluging
                        // 	cmd = "rename";
                        // 	break;
                        case "ctrl+up":
                        case "ctrl+shift+up": // mac
                            cmd = "moveUp";
                            break;
                        case "ctrl+down":
                        case "ctrl+shift+down": // mac
                            cmd = "moveDown";
                            break;
                        case "ctrl+right":
                        case "ctrl+shift+right": // mac
                            cmd = "indent";
                            break;
                        case "ctrl+left":
                        case "ctrl+shift+left": // mac
                            cmd = "outdent";
                    }
                    if (cmd) {
                        $(this).trigger("nodeCommand", { cmd: cmd });
                        return false;
                    }
                });

        });

        $('#submitData').on('click', function () {
                var tree = $("#treetable").fancytree("getTree");
            var lstId = [], lstData = [];
            $.each($('#tableWrapper .modified'), function (index, item) {
                var id = $(item).closest('tr').find('input[name="id"]').val();
                //Get the node
                if (lstId.indexOf(id) < 0) {
                    lstId.push(id);
                }
                var node = tree.getNodeByKey(id);
                //Get the custom data attribute associated to that node
                var data = node.data;
                //data is an object so, data.content will give you the value of the attribute
                switch ($(item).attr("name")) {
                    case "quantity": {
                        data.quantity = parseInt($(item).val());
                        break;
                    }
                    case "price": {
                        data.price = parseFloat($(item).val());
                        break;
                    }
                    default:
                }
            });
            if (lstId.length > 0) {
                // Get the DynaTree object instance
                $.each(lstId, function (index, id) {
                    var node = tree.getNodeByKey(id);
                    // Get the custom data attribute associated to that node
                    var data = node.data;
                    // set id to node
                    data.id = id;
                    // data is an object so, data.content will give you the value of the attribute
                    lstData.push(data);
                });
                // push lstData to server
                $.ajax({
                    type: "PUT",
                    url: "api/TreeDatas",
                    headers: { 'Content-Type': 'application/json' },
                    data: JSON.stringify(lstData),
                    success: function () {
                        $.each($('#tableWrapper .modified'), function (index, item) {
                            $(item).removeClass('border border-success border-warning modified');
                        });
                        alert("update success");
                    },
                    error: function () {
                        alert("error");
                    }
                });
            }
        });

        function convertDataSetKey(childList) {
            var parent,
                nodeMap = {};

            // Pass 1: store all tasks in reference map
            $.each(childList, function (i, c) {
                nodeMap[c.id] = c;
            });
            childList = $.map(childList, function (c) {
                // Rename 'key' to 'id'
                c.key = c.id;
                delete c.id;
                return c;  // Keep top-level nodes
            });
            return childList;
        }
        function convertData(childList) {
            var parent,
                nodeMap = {};

            // Pass 1: store all tasks in reference map
            $.each(childList, function (i, c) {
                nodeMap[c.id] = c;
            });
            // Pass 2: adjust fields and fix child structure
            childList = $.map(childList, function (c) {
                // Rename 'key' to 'id'
                c.key = c.id;
                delete c.id;

                // Check if c is a child node
                if (c.parentId) {
                    // add c to `children` array of parent node
                    parent = nodeMap[c.parentId];
                    if (parent.children) {
                        parent.children.push(c);
                    } else {
                        parent.children = [c];
                    }
                    return null;  // Remove c from childList
                }
                return c;  // Keep top-level nodes
            });
            // Pass 3: sort children by 'id'
            $.each(childList, function (i, c) {
                if (c.children && c.children.length > 1) {
                    c.children.sort(function (a, b) {
                        return ((a.id < b.id) ? -1 : ((a.id > b.id) ? 1 : 0));
                    });
                }
            });
            return childList;
        }
    </script>
}
